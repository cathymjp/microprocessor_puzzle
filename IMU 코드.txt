#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "llio.h"
#include "stm32f4xx.h"
#include "delay.h"
#include "tm_stm32f4_i2c.h"
#include "tm_stm32f4_gpio.h"
#include "led.h"

#define Lee_BUFF_LEN                50
#define IRsensor_Address 0xB0//주소 구하자

#define TIMER_PRESCALER_FREQ_2    10000                      //1MHz 
#define TIMER_PRESCALER_FREQ_5    10000                     //1MHz 

#define TIMER_FREQ_2            50            // PC 송신 주파수
#define TIMER_FREQ_5            50            //IR 데이터 수신 주파수 


typedef enum
{
        false = 0, true = !false
}bool;

typedef struct
{
        int lx[4];
        int ly[4];
        
} IR_STRU;


int slaveAddress;
uint8_t Lee_IRbuffer[16];
int Ix[4];
int Iy[4];
int s;
int test = 0;
char Lee_data_Ix[4][2];
char Lee_data_Iy[4][2];

bool Lee_bStartPacket = false;
bool Lee_bStartPacket2 = false;
char Lee_buffer_read[Lee_BUFF_LEN] = { 0 };
char Lee_buffer_read2[Lee_BUFF_LEN] = { 0 };
int Lee_pos_packet = 0;
int Lee_pos_packet2 = 0;
char Lee_data_rr[2], Lee_data_pp[2], Lee_data_yy[2]; // 파싱된 데이터 저장 Format ( 248,rr,rr,pp,pp,yy,yy,249)

void UART1Print(const char *pucBuffer);
void Lee_parsingData(); // IMU에서 받아온 데이터를 파싱
int Lee_send_cnt = 0;
uint8_t Lee_buffer[21];
char Lee_IMUTEST[100] = { 0 };

float Lee_rr, Lee_pp, Lee_yy;
int IRX[2] = { 0 };
int IRY[2] = { 0 };

static char start[] = "*";
static char tokenizer[] = ",";
static char CR[] = "\n";
static char NU[] = "\0";
char data = 0;
char data2 = 0;
int avg_cnt = 0;
//50Hz

float angles[3] = { 0 };

char Lee_tmep_Buffer[100];
char Lee_tmep_Buffer2[100];


void Init_TIM2() {//PC로 데이터 보내는 타이머 초기화
        uint16_t PrescalerValue;
        
        TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
        
        NVIC_InitTypeDef NVIC_InitStructure;
        NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
        
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
        
        SystemCoreClockUpdate();
        
        PrescalerValue = (uint16_t)(SystemCoreClock / 2 / TIMER_PRESCALER_FREQ_2) - 1;
        TIM_TimeBaseStructure.TIM_Period = (TIMER_PRESCALER_FREQ_2 / TIMER_FREQ_2) - 1;
        
        
        TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
        TIM_TimeBaseStructure.TIM_ClockDivision = 0;
        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
        
        TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
        
        /* TIM IT enable */
        TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
        
        /* TIMX enable counter */
        TIM_Cmd(TIM2, ENABLE);
}
void Init_GPIO_A() {
        GPIO_InitTypeDef GPIO_InitStructure;
        
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
        
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
        
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
        //GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN;   
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
        GPIO_Init(GPIOA, &GPIO_InitStructure);
        
}


void write_2bytes(uint8_t d1, uint8_t d2) {
        TM_I2C_Write(I2C1, slaveAddress, d1, d2);
}

void Init_USART1_IMU(void) {
        
        GPIO_InitTypeDef GPIO_InitStructure;
        USART_InitTypeDef USART_InitStructure;
        NVIC_InitTypeDef NVIC_InitStructure;
        
        // Enable peripheral
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
        RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
        
        // Configure USART Interrupt
        NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
        
        // GPIO AF config
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
        GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
        
        // Configure GPIO(UART TX/RX) 
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; // USART TX Pin Number
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_Init(GPIOA, &GPIO_InitStructure);
        
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; // USART RX Pin Number
        GPIO_Init(GPIOA, &GPIO_InitStructure);
        
        // Configure UART peripheral
        USART_InitStructure.USART_BaudRate = 115200;//Baudrate
        USART_InitStructure.USART_WordLength = USART_WordLength_8b;
        USART_InitStructure.USART_StopBits = USART_StopBits_1;
        USART_InitStructure.USART_Parity = USART_Parity_No;
        USART_InitStructure.USART_HardwareFlowControl
                = USART_HardwareFlowControl_None;
        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
        USART_Init(USART1, &USART_InitStructure);
        
        // Enable USART receive interrupt
        USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
        
        USART_Cmd(USART1, ENABLE);
}


void Init_USART2_PC(void) { // IMU 센서의 값을 입력받는 유아트
        GPIO_InitTypeDef GPIO_InitStructure;
        USART_InitTypeDef USART_InitStructure;
        NVIC_InitTypeDef NVIC_InitStructure;
        
        // Enable peripheral
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
        
        // Configure USART Interrupt
        NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
        //        
        // GPIO AF config       //PD5:TX, PD6: RX
        GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
        GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
        
        // Configure GPIO(UART TX/RX)
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_Init(GPIOD, &GPIO_InitStructure);
        
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
        GPIO_Init(GPIOD, &GPIO_InitStructure);
        
        // Configure UART peripheral
        USART_InitStructure.USART_BaudRate = 115200;
        USART_InitStructure.USART_WordLength = USART_WordLength_8b;
        USART_InitStructure.USART_StopBits = USART_StopBits_1;
        USART_InitStructure.USART_Parity = USART_Parity_No;
        USART_InitStructure.USART_HardwareFlowControl
                = USART_HardwareFlowControl_None;
        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
        USART_Init(USART2, &USART_InitStructure);
        
        // Enable USART receive interrupt
        USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
        
        USART_Cmd(USART2, ENABLE);
}

void Init_USART3_IR(void) {
        
        GPIO_InitTypeDef GPIO_InitStructure;
        USART_InitTypeDef USART_InitStructure;
        NVIC_InitTypeDef NVIC_InitStructure;
        
        // Enable peripheral
        RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
        
        
        // Configure USART Interrupt
        NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
        //        
        // GPIO AF config
        GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_USART3);
        GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_USART3);
        
        // Configure GPIO(UART TX/RX)  PD8: TX, PD9: RX
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
        GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
        GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
        GPIO_Init(GPIOD, &GPIO_InitStructure);
        
        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
        GPIO_Init(GPIOD, &GPIO_InitStructure);
        
        // Configure UART peripheral
        USART_InitStructure.USART_BaudRate = 115200;
        USART_InitStructure.USART_WordLength = USART_WordLength_8b;
        USART_InitStructure.USART_StopBits = USART_StopBits_1;
        USART_InitStructure.USART_Parity = USART_Parity_No;
        USART_InitStructure.USART_HardwareFlowControl
                = USART_HardwareFlowControl_None;
        USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
        
        USART_Init(USART3, &USART_InitStructure);
        
        // Enable USART receive interrupt
        USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
        
        USART_Cmd(USART3, ENABLE);
}

uint16_t USART_GetChar()
{
        
        // Wait until data is received
        
        while (!USART_GetFlagStatus(USART2, USART_FLAG_RXNE));
        
        // Read received char
        
        return USART_ReceiveData(USART2);
        
}

void UART2Print_DS(const char *pucBuffer) {
        // Loop while there are more characters to send.
        while (*pucBuffer) {
                // Write the next character to the UART.      
                USART_SendData(USART2, *pucBuffer++);
                while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
                
        }
}



void Init_TIM3() {
        uint16_t PrescalerValue;
        
        TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
        
        NVIC_InitTypeDef NVIC_InitStructure;
        NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0f;
        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
        NVIC_Init(&NVIC_InitStructure);
        
        RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
        
        SystemCoreClockUpdate(); PrescalerValue = 8399;
        TIM_TimeBaseStructure.TIM_Period = 99;
        
        
        TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
        TIM_TimeBaseStructure.TIM_ClockDivision = 0;
        TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
        
        TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
        
        /* TIM IT enable */
        TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
        
        /* TIMX enable counter */
        TIM_Cmd(TIM3, ENABLE);
}


int main()
{
        
        LED_Init();
         LED_R_ON();
          LED_R_OFF();

        
        Init_USART1_IMU();
        Init_USART2_PC();
        Init_USART3_IR();
        
        Init_TIM2();
        Init_TIM3();

        
        while (1) {
                

        }
}


void Lee_IRparsingData() {
        
        
        Lee_data_Ix[0][0] = Ix[0] / 100 + 1;
        Lee_data_Ix[0][1] = Ix[0] % 100 + 1;
        Lee_data_Iy[0][0] = Iy[0] / 100 + 1;
        Lee_data_Iy[0][1] = Iy[0] % 100 + 1;
        
        Lee_data_Ix[1][0] = Ix[1] / 100 + 1;
        Lee_data_Ix[1][1] = Ix[1] % 100 + 1;
        Lee_data_Iy[1][0] = Iy[1] / 100 + 1;
        Lee_data_Iy[1][1] = Iy[1] % 100 + 1;
        
        Lee_data_Ix[2][0] = Ix[2] / 100 + 1;
        Lee_data_Ix[2][1] = Ix[2] % 100 + 1;
        Lee_data_Iy[2][0] = Iy[2] / 100 + 1;
        Lee_data_Iy[2][1] = Iy[2] % 100 + 1;
        
        Lee_data_Ix[3][0] = Ix[3] / 100 + 1;
        Lee_data_Ix[3][1] = Ix[3] % 100 + 1;
        Lee_data_Iy[3][0] = Iy[3] / 100 + 1;
        Lee_data_Iy[3][1] = Iy[3] % 100 + 1;
}

bool t_flag = false;
bool reset_flag = false;
char test_data[3] = { 0 };

bool i2c_flag = false;
bool imu_flag = false;

void USART1_IRQHandler(void) {
        if (USART_GetITStatus(USART1, USART_IT_RXNE) == SET) 
        {
                
                data = USART_ReceiveData(USART1);
     
                //USART_SendData(USART2,data);
                
                if (data == '*' && Lee_bStartPacket==false  ) {
                        
                        Lee_pos_packet = 0;
                        memset(Lee_buffer_read, 0, Lee_BUFF_LEN);
                        Lee_bStartPacket = true;
                }
                else if (data == '\n' && Lee_bStartPacket) {
                        
                        if(imu_flag==false){
                                Lee_buffer_read[Lee_pos_packet] = '\0';
                                strcpy(Lee_tmep_Buffer, Lee_buffer_read);
                                imu_flag=true;
                        }
                        
                        
                        
                       // UART2Print_DS(Lee_tmep_Buffer);

                }
                else if (Lee_bStartPacket) {
                        if (data !=0x0D && data != 0x0A) {
                                Lee_buffer_read[Lee_pos_packet] = data;
                                Lee_pos_packet++;
                        }
                        
                        if(data == '*'){                              
                                Lee_pos_packet = 0;
                                memset(Lee_buffer_read, 0, Lee_BUFF_LEN);
                        }
                }
                
                
        }
}

void USART3_IRQHandler(void) {
        if (USART_GetITStatus(USART3, USART_IT_RXNE) == SET)
        {
                
                //while (!USART_GetFlagStatus(USART3, USART_FLAG_RXNE));
                
                // Read received char
                
                data2 = USART_ReceiveData(USART3);

                
                if (data2 == '*'&& !Lee_bStartPacket2 && i2c_flag == false) {
                        
                        Lee_pos_packet2 = 0;
                        memset(Lee_buffer_read2, 0, Lee_BUFF_LEN);
                        Lee_bStartPacket2 = true;
                }
                else if (data2 == '#' && Lee_bStartPacket2 && i2c_flag == false) {
                    //    Lee_buffer_read2[Lee_pos_packet2] = '\t';
                        Lee_buffer_read2[Lee_pos_packet2] = '\0';
                        if (i2c_flag == false)
                        {
                                strcpy(Lee_tmep_Buffer2, Lee_buffer_read2);
                              //  UART2Print_DS(Lee_buffer_read2);
                                i2c_flag = true;
                        }

                }
                else if (Lee_bStartPacket2) {
                        if (data2 != '\r' && data2 != '\n') {
                                Lee_buffer_read2[Lee_pos_packet2] = data2;
                                Lee_pos_packet2++;
                        }
                        
                         if(data2 == '*'){                              
                                Lee_pos_packet2 = 0;
                                memset(Lee_buffer_read2, 0, Lee_BUFF_LEN);
                        }
                }
                
        }
}

bool imu_flag2 = false;
void USART2_IRQHandler(void)
{
        if (USART_GetITStatus(USART2, USART_IT_RXNE) == SET)
        {
                
        }
}


int k = 0;
bool flag = false;
int i2c_reset_cnt = 0;

// 50Hz
void TIM2_IRQHandler(void)
{
        if (TIM_GetITStatus(TIM2, TIM_IT_Update) == SET)
        {
                TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
                flag = !flag;
                if (flag) {
                        GPIO_WriteBit(GPIOA, GPIO_Pin_10, Bit_SET);
                }
                else {
                        GPIO_WriteBit(GPIOA, GPIO_Pin_10, Bit_RESET);
                }
                
                if(imu_flag == false){
                        USART_SendData(USART1,'*');
                }
                
                if(i2c_flag ==false){
                        USART_SendData(USART3,'*');
                }
                        

                
                if (imu_flag == true && i2c_flag == true) {
                        sprintf(Lee_IMUTEST, "#%s,%s&\n", Lee_tmep_Buffer2, Lee_tmep_Buffer);
                        UART2Print_DS(Lee_IMUTEST);    // ##############-----IMU/IR 출력 부분----################

                        
                        memset(Lee_IMUTEST, 0, Lee_BUFF_LEN);
                        
                        imu_flag = false;
                        i2c_flag = false;
                        
                        
                        memset(Lee_tmep_Buffer, 0, Lee_BUFF_LEN);
                        memset(Lee_tmep_Buffer2, 0, Lee_BUFF_LEN);
                        Lee_pos_packet2 = 0;
                        Lee_bStartPacket2 = false;
                        Lee_pos_packet = 0;
                        Lee_bStartPacket = false;                   
                }
                
        }
}


void TIM3_IRQHandler(void)
{
        if (TIM_GetITStatus(TIM3, TIM_IT_Update) == SET)
        {
                TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
                
                //        sprintf(Lee_IMUTEST, "#%s&\n", Lee_tmep_Buffer);
                //        UART2Print_DS(Lee_IMUTEST);
                //USART_SendData(USART1,'a');
                
                //        sprintf(Lee_IMUTEST, "#%s&\n", Lee_tmep_Buffer);
                //        UART2Print_DS(Lee_buffer_read);
                //  UART2Print_DS(Lee_buffer_read);
                
        }
}